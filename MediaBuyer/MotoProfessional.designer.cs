#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MotoProfessional
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Photos")]
	public partial class MotoProfessionalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDbCollectionPhoto(DbCollectionPhoto instance);
    partial void UpdateDbCollectionPhoto(DbCollectionPhoto instance);
    partial void DeleteDbCollectionPhoto(DbCollectionPhoto instance);
    partial void InsertDbCountry(DbCountry instance);
    partial void UpdateDbCountry(DbCountry instance);
    partial void DeleteDbCountry(DbCountry instance);
    partial void InsertDbRateCardItem(DbRateCardItem instance);
    partial void UpdateDbRateCardItem(DbRateCardItem instance);
    partial void DeleteDbRateCardItem(DbRateCardItem instance);
    partial void InsertDbBasketItem(DbBasketItem instance);
    partial void UpdateDbBasketItem(DbBasketItem instance);
    partial void DeleteDbBasketItem(DbBasketItem instance);
    partial void InsertDbOrderItem(DbOrderItem instance);
    partial void UpdateDbOrderItem(DbOrderItem instance);
    partial void DeleteDbOrderItem(DbOrderItem instance);
    partial void InsertDbCompanyStaff(DbCompanyStaff instance);
    partial void UpdateDbCompanyStaff(DbCompanyStaff instance);
    partial void DeleteDbCompanyStaff(DbCompanyStaff instance);
    partial void InsertDbProfile(DbProfile instance);
    partial void UpdateDbProfile(DbProfile instance);
    partial void DeleteDbProfile(DbProfile instance);
    partial void InsertDbCollection(DbCollection instance);
    partial void UpdateDbCollection(DbCollection instance);
    partial void DeleteDbCollection(DbCollection instance);
    partial void InsertDbRateCard(DbRateCard instance);
    partial void UpdateDbRateCard(DbRateCard instance);
    partial void DeleteDbRateCard(DbRateCard instance);
    partial void InsertDbOrder(DbOrder instance);
    partial void UpdateDbOrder(DbOrder instance);
    partial void DeleteDbOrder(DbOrder instance);
    partial void InsertDbBasket(DbBasket instance);
    partial void UpdateDbBasket(DbBasket instance);
    partial void DeleteDbBasket(DbBasket instance);
    partial void InsertDbDigitalGoodsDownloadLog(DbDigitalGoodsDownloadLog instance);
    partial void UpdateDbDigitalGoodsDownloadLog(DbDigitalGoodsDownloadLog instance);
    partial void DeleteDbDigitalGoodsDownloadLog(DbDigitalGoodsDownloadLog instance);
    partial void InsertDbDigitalGood(DbDigitalGood instance);
    partial void UpdateDbDigitalGood(DbDigitalGood instance);
    partial void DeleteDbDigitalGood(DbDigitalGood instance);
    partial void InsertDbPhoto(DbPhoto instance);
    partial void UpdateDbPhoto(DbPhoto instance);
    partial void DeleteDbPhoto(DbPhoto instance);
    partial void InsertDbLicense(DbLicense instance);
    partial void UpdateDbLicense(DbLicense instance);
    partial void DeleteDbLicense(DbLicense instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertDbCompany(DbCompany instance);
    partial void UpdateDbCompany(DbCompany instance);
    partial void DeleteDbCompany(DbCompany instance);
    partial void InsertDbOrderTransaction(DbOrderTransaction instance);
    partial void UpdateDbOrderTransaction(DbOrderTransaction instance);
    partial void DeleteDbOrderTransaction(DbOrderTransaction instance);
    partial void InsertDbPartner(DbPartner instance);
    partial void UpdateDbPartner(DbPartner instance);
    partial void DeleteDbPartner(DbPartner instance);
    #endregion
		
		public MotoProfessionalDataContext() : 
				base("Data Source=JAY-PC;Initial Catalog=Photos;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public MotoProfessionalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MotoProfessionalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MotoProfessionalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MotoProfessionalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DbCollectionPhoto> DbCollectionPhotos
		{
			get
			{
				return this.GetTable<DbCollectionPhoto>();
			}
		}
		
		public System.Data.Linq.Table<DbCountry> DbCountries
		{
			get
			{
				return this.GetTable<DbCountry>();
			}
		}
		
		public System.Data.Linq.Table<DbPopularTag> DbPopularTags
		{
			get
			{
				return this.GetTable<DbPopularTag>();
			}
		}
		
		public System.Data.Linq.Table<DbRateCardItem> DbRateCardItems
		{
			get
			{
				return this.GetTable<DbRateCardItem>();
			}
		}
		
		public System.Data.Linq.Table<DbBasketItem> DbBasketItems
		{
			get
			{
				return this.GetTable<DbBasketItem>();
			}
		}
		
		public System.Data.Linq.Table<DbOrderItem> DbOrderItems
		{
			get
			{
				return this.GetTable<DbOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<DbCompanyStaff> DbCompanyStaffs
		{
			get
			{
				return this.GetTable<DbCompanyStaff>();
			}
		}
		
		public System.Data.Linq.Table<DbProfile> DbProfiles
		{
			get
			{
				return this.GetTable<DbProfile>();
			}
		}
		
		public System.Data.Linq.Table<DbCollection> DbCollections
		{
			get
			{
				return this.GetTable<DbCollection>();
			}
		}
		
		public System.Data.Linq.Table<DbRateCard> DbRateCards
		{
			get
			{
				return this.GetTable<DbRateCard>();
			}
		}
		
		public System.Data.Linq.Table<DbOrder> DbOrders
		{
			get
			{
				return this.GetTable<DbOrder>();
			}
		}
		
		public System.Data.Linq.Table<DbBasket> DbBaskets
		{
			get
			{
				return this.GetTable<DbBasket>();
			}
		}
		
		public System.Data.Linq.Table<DbDigitalGoodsDownloadLog> DbDigitalGoodsDownloadLogs
		{
			get
			{
				return this.GetTable<DbDigitalGoodsDownloadLog>();
			}
		}
		
		public System.Data.Linq.Table<DbDigitalGood> DbDigitalGoods
		{
			get
			{
				return this.GetTable<DbDigitalGood>();
			}
		}
		
		public System.Data.Linq.Table<DbPhoto> DbPhotos
		{
			get
			{
				return this.GetTable<DbPhoto>();
			}
		}
		
		public System.Data.Linq.Table<DbLicense> DbLicenses
		{
			get
			{
				return this.GetTable<DbLicense>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<Search> Searches
		{
			get
			{
				return this.GetTable<Search>();
			}
		}
		
		public System.Data.Linq.Table<DbCompany> DbCompanies
		{
			get
			{
				return this.GetTable<DbCompany>();
			}
		}
		
		public System.Data.Linq.Table<DbOrderTransaction> DbOrderTransactions
		{
			get
			{
				return this.GetTable<DbOrderTransaction>();
			}
		}
		
		public System.Data.Linq.Table<DbPartner> DbPartners
		{
			get
			{
				return this.GetTable<DbPartner>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FindCollectionsByPhotoTag")]
		public ISingleResult<FindCollectionsByPhotoTagResult> FindCollectionsByPhotoTag([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tag", DbType="VarChar(255)")] string tag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tag, maxRecords, status);
			return ((ISingleResult<FindCollectionsByPhotoTagResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FindCollectionsByName")]
		public ISingleResult<FindCollectionsByNameResult> FindCollectionsByName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, maxRecords, status);
			return ((ISingleResult<FindCollectionsByNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.IncrementPhotoViewCount")]
		public int IncrementPhotoViewCount([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhotoID", DbType="Int")] System.Nullable<int> photoID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), photoID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FindPhotosByTag")]
		public ISingleResult<FindPhotosByTagResult> FindPhotosByTag([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tag", DbType="VarChar(255)")] string tag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tag, maxRecords, status);
			return ((ISingleResult<FindPhotosByTagResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FindPartnerCollectionsByTag")]
		public ISingleResult<FindPartnerCollectionsByTagResult> FindPartnerCollectionsByTag([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PartnerID", DbType="Int")] System.Nullable<int> partnerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tag", DbType="VarChar(255)")] string tag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), partnerID, tag, maxRecords, status);
			return ((ISingleResult<FindPartnerCollectionsByTagResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FindPartnerCollectionsByName")]
		public ISingleResult<FindPartnerCollectionsByNameResult> FindPartnerCollectionsByName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PartnerID", DbType="Int")] System.Nullable<int> partnerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), partnerID, name, maxRecords, status);
			return ((ISingleResult<FindPartnerCollectionsByNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LogSearch")]
		public int LogSearch([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Term", DbType="NVarChar(300)")] string term, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CapturedFrom", DbType="DateTime")] System.Nullable<System.DateTime> capturedFrom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CapturedUntil", DbType="DateTime")] System.Nullable<System.DateTime> capturedUntil, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Property", DbType="TinyInt")] System.Nullable<byte> property, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Orientation", DbType="TinyInt")] System.Nullable<byte> orientation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IPAddress", DbType="VarChar(20)")] string iPAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Results", DbType="Int")] System.Nullable<int> results)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), term, capturedFrom, capturedUntil, property, orientation, userUID, iPAddress, results);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCollectionPhotos")]
		public ISingleResult<GetCollectionPhotosResult> GetCollectionPhotos([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CollectionID", DbType="Int")] System.Nullable<int> collectionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), collectionID);
			return ((ISingleResult<GetCollectionPhotosResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetPartnerTopSellingPhotos")]
		public ISingleResult<GetPartnerTopSellingPhotosResult> GetPartnerTopSellingPhotos([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PartnerID", DbType="Int")] System.Nullable<int> partnerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), partnerID, maxRecords);
			return ((ISingleResult<GetPartnerTopSellingPhotosResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTopSellingPhotos")]
		public ISingleResult<GetTopSellingPhotosResult> GetTopSellingPhotos([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maxRecords);
			return ((ISingleResult<GetTopSellingPhotosResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTopViewedPhotos")]
		public ISingleResult<GetTopViewedPhotosResult> GetTopViewedPhotos([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maxRecords);
			return ((ISingleResult<GetTopViewedPhotosResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetPartnerTopViewedPhotos")]
		public ISingleResult<GetPartnerTopViewedPhotosResult> GetPartnerTopViewedPhotos([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PartnerID", DbType="Int")] System.Nullable<int> partnerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxRecords", DbType="Int")] System.Nullable<int> maxRecords)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), partnerID, maxRecords);
			return ((ISingleResult<GetPartnerTopViewedPhotosResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCurrentTopPartners")]
		public ISingleResult<GetCurrentTopPartnersResult> GetCurrentTopPartners([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxResults", DbType="Int")] System.Nullable<int> maxResults)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maxResults);
			return ((ISingleResult<GetCurrentTopPartnersResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectionPhotos")]
	public partial class DbCollectionPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectionID;
		
		private int _PhotoID;
		
		private System.DateTime _Created;
		
		private int _Order;
		
		private EntityRef<DbCollection> _DbCollection;
		
		private EntityRef<DbPhoto> _DbPhoto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public DbCollectionPhoto()
		{
			this._DbCollection = default(EntityRef<DbCollection>);
			this._DbPhoto = default(EntityRef<DbPhoto>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._DbCollection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					if (this._DbPhoto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCollection_DbCollectionPhoto", Storage="_DbCollection", ThisKey="CollectionID", OtherKey="ID", IsForeignKey=true)]
		public DbCollection DbCollection
		{
			get
			{
				return this._DbCollection.Entity;
			}
			set
			{
				DbCollection previousValue = this._DbCollection.Entity;
				if (((previousValue != value) 
							|| (this._DbCollection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbCollection.Entity = null;
						previousValue.DbCollectionPhotos.Remove(this);
					}
					this._DbCollection.Entity = value;
					if ((value != null))
					{
						value.DbCollectionPhotos.Add(this);
						this._CollectionID = value.ID;
					}
					else
					{
						this._CollectionID = default(int);
					}
					this.SendPropertyChanged("DbCollection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPhoto_DbCollectionPhoto", Storage="_DbPhoto", ThisKey="PhotoID", OtherKey="ID", IsForeignKey=true)]
		public DbPhoto DbPhoto
		{
			get
			{
				return this._DbPhoto.Entity;
			}
			set
			{
				DbPhoto previousValue = this._DbPhoto.Entity;
				if (((previousValue != value) 
							|| (this._DbPhoto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbPhoto.Entity = null;
						previousValue.DbCollectionPhotos.Remove(this);
					}
					this._DbPhoto.Entity = value;
					if ((value != null))
					{
						value.DbCollectionPhotos.Add(this);
						this._PhotoID = value.ID;
					}
					else
					{
						this._PhotoID = default(int);
					}
					this.SendPropertyChanged("DbPhoto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class DbCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Numeric;
		
		private string _Alpha_2;
		
		private string _Alpha_3;
		
		private EntitySet<DbCompany> _DbCompanies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumericChanging(string value);
    partial void OnNumericChanged();
    partial void OnAlpha_2Changing(string value);
    partial void OnAlpha_2Changed();
    partial void OnAlpha_3Changing(string value);
    partial void OnAlpha_3Changed();
    #endregion
		
		public DbCountry()
		{
			this._DbCompanies = new EntitySet<DbCompany>(new Action<DbCompany>(this.attach_DbCompanies), new Action<DbCompany>(this.detach_DbCompanies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numeric", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Numeric
		{
			get
			{
				return this._Numeric;
			}
			set
			{
				if ((this._Numeric != value))
				{
					this.OnNumericChanging(value);
					this.SendPropertyChanging();
					this._Numeric = value;
					this.SendPropertyChanged("Numeric");
					this.OnNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Alpha-2]", Storage="_Alpha_2", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Alpha_2
		{
			get
			{
				return this._Alpha_2;
			}
			set
			{
				if ((this._Alpha_2 != value))
				{
					this.OnAlpha_2Changing(value);
					this.SendPropertyChanging();
					this._Alpha_2 = value;
					this.SendPropertyChanged("Alpha_2");
					this.OnAlpha_2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Alpha-3]", Storage="_Alpha_3", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Alpha_3
		{
			get
			{
				return this._Alpha_3;
			}
			set
			{
				if ((this._Alpha_3 != value))
				{
					this.OnAlpha_3Changing(value);
					this.SendPropertyChanging();
					this._Alpha_3 = value;
					this.SendPropertyChanged("Alpha_3");
					this.OnAlpha_3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCountry_DbCompany", Storage="_DbCompanies", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<DbCompany> DbCompanies
		{
			get
			{
				return this._DbCompanies;
			}
			set
			{
				this._DbCompanies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbCompanies(DbCompany entity)
		{
			this.SendPropertyChanging();
			entity.DbCountry = this;
		}
		
		private void detach_DbCompanies(DbCompany entity)
		{
			this.SendPropertyChanging();
			entity.DbCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PopularTags")]
	public partial class DbPopularTag
	{
		
		private string _Tag;
		
		private int _Occurances;
		
		private byte _Type;
		
		public DbPopularTag()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occurances", DbType="Int NOT NULL")]
		public int Occurances
		{
			get
			{
				return this._Occurances;
			}
			set
			{
				if ((this._Occurances != value))
				{
					this._Occurances = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RateCardItems")]
	public partial class DbRateCardItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RateCardID;
		
		private int _LicenseID;
		
		private decimal _Amount;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntityRef<DbRateCard> _DbRateCard;
		
		private EntityRef<DbLicense> _DbLicense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRateCardIDChanging(int value);
    partial void OnRateCardIDChanged();
    partial void OnLicenseIDChanging(int value);
    partial void OnLicenseIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbRateCardItem()
		{
			this._DbRateCard = default(EntityRef<DbRateCard>);
			this._DbLicense = default(EntityRef<DbLicense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateCardID", DbType="Int NOT NULL")]
		public int RateCardID
		{
			get
			{
				return this._RateCardID;
			}
			set
			{
				if ((this._RateCardID != value))
				{
					if (this._DbRateCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateCardIDChanging(value);
					this.SendPropertyChanging();
					this._RateCardID = value;
					this.SendPropertyChanged("RateCardID");
					this.OnRateCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="Int NOT NULL")]
		public int LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					if (this._DbLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbRateCard_DbRateCardItem", Storage="_DbRateCard", ThisKey="RateCardID", OtherKey="ID", IsForeignKey=true)]
		public DbRateCard DbRateCard
		{
			get
			{
				return this._DbRateCard.Entity;
			}
			set
			{
				DbRateCard previousValue = this._DbRateCard.Entity;
				if (((previousValue != value) 
							|| (this._DbRateCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbRateCard.Entity = null;
						previousValue.DbRateCardItems.Remove(this);
					}
					this._DbRateCard.Entity = value;
					if ((value != null))
					{
						value.DbRateCardItems.Add(this);
						this._RateCardID = value.ID;
					}
					else
					{
						this._RateCardID = default(int);
					}
					this.SendPropertyChanged("DbRateCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbLicense_DbRateCardItem", Storage="_DbLicense", ThisKey="LicenseID", OtherKey="ID", IsForeignKey=true)]
		public DbLicense DbLicense
		{
			get
			{
				return this._DbLicense.Entity;
			}
			set
			{
				DbLicense previousValue = this._DbLicense.Entity;
				if (((previousValue != value) 
							|| (this._DbLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbLicense.Entity = null;
						previousValue.DbRateCardItems.Remove(this);
					}
					this._DbLicense.Entity = value;
					if ((value != null))
					{
						value.DbRateCardItems.Add(this);
						this._LicenseID = value.ID;
					}
					else
					{
						this._LicenseID = default(int);
					}
					this.SendPropertyChanged("DbLicense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasketItems")]
	public partial class DbBasketItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BasketID;
		
		private int _PhotoID;
		
		private int _LicenseID;
		
		private System.DateTime _Created;
		
		private EntityRef<DbBasket> _DbBasket;
		
		private EntityRef<DbPhoto> _DbPhoto;
		
		private EntityRef<DbLicense> _DbLicense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBasketIDChanging(int value);
    partial void OnBasketIDChanged();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnLicenseIDChanging(int value);
    partial void OnLicenseIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public DbBasketItem()
		{
			this._DbBasket = default(EntityRef<DbBasket>);
			this._DbPhoto = default(EntityRef<DbPhoto>);
			this._DbLicense = default(EntityRef<DbLicense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasketID", DbType="Int NOT NULL")]
		public int BasketID
		{
			get
			{
				return this._BasketID;
			}
			set
			{
				if ((this._BasketID != value))
				{
					if (this._DbBasket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBasketIDChanging(value);
					this.SendPropertyChanging();
					this._BasketID = value;
					this.SendPropertyChanged("BasketID");
					this.OnBasketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", DbType="Int NOT NULL")]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					if (this._DbPhoto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="Int NOT NULL")]
		public int LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					if (this._DbLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbBasket_DbBasketItem", Storage="_DbBasket", ThisKey="BasketID", OtherKey="ID", IsForeignKey=true)]
		public DbBasket DbBasket
		{
			get
			{
				return this._DbBasket.Entity;
			}
			set
			{
				DbBasket previousValue = this._DbBasket.Entity;
				if (((previousValue != value) 
							|| (this._DbBasket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbBasket.Entity = null;
						previousValue.DbBasketItems.Remove(this);
					}
					this._DbBasket.Entity = value;
					if ((value != null))
					{
						value.DbBasketItems.Add(this);
						this._BasketID = value.ID;
					}
					else
					{
						this._BasketID = default(int);
					}
					this.SendPropertyChanged("DbBasket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPhoto_DbBasketItem", Storage="_DbPhoto", ThisKey="PhotoID", OtherKey="ID", IsForeignKey=true)]
		public DbPhoto DbPhoto
		{
			get
			{
				return this._DbPhoto.Entity;
			}
			set
			{
				DbPhoto previousValue = this._DbPhoto.Entity;
				if (((previousValue != value) 
							|| (this._DbPhoto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbPhoto.Entity = null;
						previousValue.DbBasketItems.Remove(this);
					}
					this._DbPhoto.Entity = value;
					if ((value != null))
					{
						value.DbBasketItems.Add(this);
						this._PhotoID = value.ID;
					}
					else
					{
						this._PhotoID = default(int);
					}
					this.SendPropertyChanged("DbPhoto");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbLicense_DbBasketItem", Storage="_DbLicense", ThisKey="LicenseID", OtherKey="ID", IsForeignKey=true)]
		public DbLicense DbLicense
		{
			get
			{
				return this._DbLicense.Entity;
			}
			set
			{
				DbLicense previousValue = this._DbLicense.Entity;
				if (((previousValue != value) 
							|| (this._DbLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbLicense.Entity = null;
						previousValue.DbBasketItems.Remove(this);
					}
					this._DbLicense.Entity = value;
					if ((value != null))
					{
						value.DbBasketItems.Add(this);
						this._LicenseID = value.ID;
					}
					else
					{
						this._LicenseID = default(int);
					}
					this.SendPropertyChanged("DbLicense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderItems")]
	public partial class DbOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrderID;
		
		private int _PhotoID;
		
		private int _LicenseID;
		
		private decimal _SaleRate;
		
		private byte _Status;
		
		private EntitySet<DbDigitalGood> _DbDigitalGoods;
		
		private EntityRef<DbOrder> _DbOrder;
		
		private EntityRef<DbPhoto> _DbPhoto;
		
		private EntityRef<DbLicense> _DbLicense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnLicenseIDChanging(int value);
    partial void OnLicenseIDChanged();
    partial void OnSaleRateChanging(decimal value);
    partial void OnSaleRateChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public DbOrderItem()
		{
			this._DbDigitalGoods = new EntitySet<DbDigitalGood>(new Action<DbDigitalGood>(this.attach_DbDigitalGoods), new Action<DbDigitalGood>(this.detach_DbDigitalGoods));
			this._DbOrder = default(EntityRef<DbOrder>);
			this._DbPhoto = default(EntityRef<DbPhoto>);
			this._DbLicense = default(EntityRef<DbLicense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._DbOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", DbType="Int NOT NULL")]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					if (this._DbPhoto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="Int NOT NULL")]
		public int LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					if (this._DbLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleRate", DbType="Money NOT NULL")]
		public decimal SaleRate
		{
			get
			{
				return this._SaleRate;
			}
			set
			{
				if ((this._SaleRate != value))
				{
					this.OnSaleRateChanging(value);
					this.SendPropertyChanging();
					this._SaleRate = value;
					this.SendPropertyChanged("SaleRate");
					this.OnSaleRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrderItem_DbDigitalGood", Storage="_DbDigitalGoods", ThisKey="ID", OtherKey="OrderItemID")]
		public EntitySet<DbDigitalGood> DbDigitalGoods
		{
			get
			{
				return this._DbDigitalGoods;
			}
			set
			{
				this._DbDigitalGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbOrderItem", Storage="_DbOrder", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public DbOrder DbOrder
		{
			get
			{
				return this._DbOrder.Entity;
			}
			set
			{
				DbOrder previousValue = this._DbOrder.Entity;
				if (((previousValue != value) 
							|| (this._DbOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbOrder.Entity = null;
						previousValue.DbOrderItems.Remove(this);
					}
					this._DbOrder.Entity = value;
					if ((value != null))
					{
						value.DbOrderItems.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("DbOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPhoto_DbOrderItem", Storage="_DbPhoto", ThisKey="PhotoID", OtherKey="ID", IsForeignKey=true)]
		public DbPhoto DbPhoto
		{
			get
			{
				return this._DbPhoto.Entity;
			}
			set
			{
				DbPhoto previousValue = this._DbPhoto.Entity;
				if (((previousValue != value) 
							|| (this._DbPhoto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbPhoto.Entity = null;
						previousValue.DbOrderItems.Remove(this);
					}
					this._DbPhoto.Entity = value;
					if ((value != null))
					{
						value.DbOrderItems.Add(this);
						this._PhotoID = value.ID;
					}
					else
					{
						this._PhotoID = default(int);
					}
					this.SendPropertyChanged("DbPhoto");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbLicense_DbOrderItem", Storage="_DbLicense", ThisKey="LicenseID", OtherKey="ID", IsForeignKey=true)]
		public DbLicense DbLicense
		{
			get
			{
				return this._DbLicense.Entity;
			}
			set
			{
				DbLicense previousValue = this._DbLicense.Entity;
				if (((previousValue != value) 
							|| (this._DbLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbLicense.Entity = null;
						previousValue.DbOrderItems.Remove(this);
					}
					this._DbLicense.Entity = value;
					if ((value != null))
					{
						value.DbOrderItems.Add(this);
						this._LicenseID = value.ID;
					}
					else
					{
						this._LicenseID = default(int);
					}
					this.SendPropertyChanged("DbLicense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbDigitalGoods(DbDigitalGood entity)
		{
			this.SendPropertyChanging();
			entity.DbOrderItem = this;
		}
		
		private void detach_DbDigitalGoods(DbDigitalGood entity)
		{
			this.SendPropertyChanging();
			entity.DbOrderItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyStaff")]
	public partial class DbCompanyStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private System.Guid _PersonUID;
		
		private byte _Status;
		
		private System.DateTime _Created;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<DbCompany> _DbCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnPersonUIDChanging(System.Guid value);
    partial void OnPersonUIDChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public DbCompanyStaff()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._DbCompany = default(EntityRef<DbCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._DbCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonUID
		{
			get
			{
				return this._PersonUID;
			}
			set
			{
				if ((this._PersonUID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonUIDChanging(value);
					this.SendPropertyChanging();
					this._PersonUID = value;
					this.SendPropertyChanged("PersonUID");
					this.OnPersonUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbCompanyStaff", Storage="_aspnet_User", ThisKey="PersonUID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.DbCompanyStaffs.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.DbCompanyStaffs.Add(this);
						this._PersonUID = value.UserId;
					}
					else
					{
						this._PersonUID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCompany_DbCompanyStaff", Storage="_DbCompany", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public DbCompany DbCompany
		{
			get
			{
				return this._DbCompany.Entity;
			}
			set
			{
				DbCompany previousValue = this._DbCompany.Entity;
				if (((previousValue != value) 
							|| (this._DbCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbCompany.Entity = null;
						previousValue.DbCompanyStaffs.Remove(this);
					}
					this._DbCompany.Entity = value;
					if ((value != null))
					{
						value.DbCompanyStaffs.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("DbCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profiles")]
	public partial class DbProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MemberUID;
		
		private string _Title;
		
		private string _Firstname;
		
		private string _Middlename;
		
		private string _Lastname;
		
		private byte _Sex;
		
		private string _JobTitle;
		
		private string _Telephone;
		
		private string _BillingAddress;
		
		private string _BillingCityTown;
		
		private string _BillingPostalCode;
		
		private System.Nullable<int> _BillingCountryID;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberUIDChanging(System.Guid value);
    partial void OnMemberUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnMiddlenameChanging(string value);
    partial void OnMiddlenameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnSexChanging(byte value);
    partial void OnSexChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnBillingCityTownChanging(string value);
    partial void OnBillingCityTownChanged();
    partial void OnBillingPostalCodeChanging(string value);
    partial void OnBillingPostalCodeChanged();
    partial void OnBillingCountryIDChanging(System.Nullable<int> value);
    partial void OnBillingCountryIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbProfile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MemberUID
		{
			get
			{
				return this._MemberUID;
			}
			set
			{
				if ((this._MemberUID != value))
				{
					this.OnMemberUIDChanging(value);
					this.SendPropertyChanging();
					this._MemberUID = value;
					this.SendPropertyChanged("MemberUID");
					this.OnMemberUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(20)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middlename", DbType="NVarChar(50)")]
		public string Middlename
		{
			get
			{
				return this._Middlename;
			}
			set
			{
				if ((this._Middlename != value))
				{
					this.OnMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._Middlename = value;
					this.SendPropertyChanged("Middlename");
					this.OnMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="TinyInt NOT NULL")]
		public byte Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(50)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(50)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCityTown", DbType="NVarChar(50)")]
		public string BillingCityTown
		{
			get
			{
				return this._BillingCityTown;
			}
			set
			{
				if ((this._BillingCityTown != value))
				{
					this.OnBillingCityTownChanging(value);
					this.SendPropertyChanging();
					this._BillingCityTown = value;
					this.SendPropertyChanged("BillingCityTown");
					this.OnBillingCityTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingPostalCode", DbType="NVarChar(20)")]
		public string BillingPostalCode
		{
			get
			{
				return this._BillingPostalCode;
			}
			set
			{
				if ((this._BillingPostalCode != value))
				{
					this.OnBillingPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._BillingPostalCode = value;
					this.SendPropertyChanged("BillingPostalCode");
					this.OnBillingPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCountryID", DbType="Int")]
		public System.Nullable<int> BillingCountryID
		{
			get
			{
				return this._BillingCountryID;
			}
			set
			{
				if ((this._BillingCountryID != value))
				{
					this.OnBillingCountryIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCountryID = value;
					this.SendPropertyChanged("BillingCountryID");
					this.OnBillingCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Collections")]
	public partial class DbCollection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private byte _Status;
		
		private int _PartnerID;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbCollectionPhoto> _DbCollectionPhotos;
		
		private EntityRef<DbPartner> _DbPartner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnPartnerIDChanging(int value);
    partial void OnPartnerIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbCollection()
		{
			this._DbCollectionPhotos = new EntitySet<DbCollectionPhoto>(new Action<DbCollectionPhoto>(this.attach_DbCollectionPhotos), new Action<DbCollectionPhoto>(this.detach_DbCollectionPhotos));
			this._DbPartner = default(EntityRef<DbPartner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._DbPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCollection_DbCollectionPhoto", Storage="_DbCollectionPhotos", ThisKey="ID", OtherKey="CollectionID")]
		public EntitySet<DbCollectionPhoto> DbCollectionPhotos
		{
			get
			{
				return this._DbCollectionPhotos;
			}
			set
			{
				this._DbCollectionPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPartner_DbCollection", Storage="_DbPartner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public DbPartner DbPartner
		{
			get
			{
				return this._DbPartner.Entity;
			}
			set
			{
				DbPartner previousValue = this._DbPartner.Entity;
				if (((previousValue != value) 
							|| (this._DbPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbPartner.Entity = null;
						previousValue.DbCollections.Remove(this);
					}
					this._DbPartner.Entity = value;
					if ((value != null))
					{
						value.DbCollections.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(int);
					}
					this.SendPropertyChanged("DbPartner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbCollectionPhotos(DbCollectionPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbCollection = this;
		}
		
		private void detach_DbCollectionPhotos(DbCollectionPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbCollection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RateCards")]
	public partial class DbRateCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PartnerID;
		
		private string _Name;
		
		private bool _IsDefault;
		
		private byte _Status;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbRateCardItem> _DbRateCardItems;
		
		private EntitySet<DbPhoto> _DbPhotos;
		
		private EntityRef<DbPartner> _DbPartner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPartnerIDChanging(int value);
    partial void OnPartnerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbRateCard()
		{
			this._DbRateCardItems = new EntitySet<DbRateCardItem>(new Action<DbRateCardItem>(this.attach_DbRateCardItems), new Action<DbRateCardItem>(this.detach_DbRateCardItems));
			this._DbPhotos = new EntitySet<DbPhoto>(new Action<DbPhoto>(this.attach_DbPhotos), new Action<DbPhoto>(this.detach_DbPhotos));
			this._DbPartner = default(EntityRef<DbPartner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._DbPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbRateCard_DbRateCardItem", Storage="_DbRateCardItems", ThisKey="ID", OtherKey="RateCardID")]
		public EntitySet<DbRateCardItem> DbRateCardItems
		{
			get
			{
				return this._DbRateCardItems;
			}
			set
			{
				this._DbRateCardItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbRateCard_DbPhoto", Storage="_DbPhotos", ThisKey="ID", OtherKey="RateCardID")]
		public EntitySet<DbPhoto> DbPhotos
		{
			get
			{
				return this._DbPhotos;
			}
			set
			{
				this._DbPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPartner_DbRateCard", Storage="_DbPartner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public DbPartner DbPartner
		{
			get
			{
				return this._DbPartner.Entity;
			}
			set
			{
				DbPartner previousValue = this._DbPartner.Entity;
				if (((previousValue != value) 
							|| (this._DbPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbPartner.Entity = null;
						previousValue.DbRateCards.Remove(this);
					}
					this._DbPartner.Entity = value;
					if ((value != null))
					{
						value.DbRateCards.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(int);
					}
					this.SendPropertyChanged("DbPartner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbRateCardItems(DbRateCardItem entity)
		{
			this.SendPropertyChanging();
			entity.DbRateCard = this;
		}
		
		private void detach_DbRateCardItems(DbRateCardItem entity)
		{
			this.SendPropertyChanging();
			entity.DbRateCard = null;
		}
		
		private void attach_DbPhotos(DbPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbRateCard = this;
		}
		
		private void detach_DbPhotos(DbPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbRateCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class DbOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _CustomerUID;
		
		private byte _ChargeMethod;
		
		private byte _ChargeStatus;
		
		private decimal _ChargeAmount;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbOrderItem> _DbOrderItems;
		
		private EntitySet<DbBasket> _DbBaskets;
		
		private EntitySet<DbDigitalGood> _DbDigitalGoods;
		
		private EntitySet<DbOrderTransaction> _DbOrderTransactions;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerUIDChanging(System.Guid value);
    partial void OnCustomerUIDChanged();
    partial void OnChargeMethodChanging(byte value);
    partial void OnChargeMethodChanged();
    partial void OnChargeStatusChanging(byte value);
    partial void OnChargeStatusChanged();
    partial void OnChargeAmountChanging(decimal value);
    partial void OnChargeAmountChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbOrder()
		{
			this._DbOrderItems = new EntitySet<DbOrderItem>(new Action<DbOrderItem>(this.attach_DbOrderItems), new Action<DbOrderItem>(this.detach_DbOrderItems));
			this._DbBaskets = new EntitySet<DbBasket>(new Action<DbBasket>(this.attach_DbBaskets), new Action<DbBasket>(this.detach_DbBaskets));
			this._DbDigitalGoods = new EntitySet<DbDigitalGood>(new Action<DbDigitalGood>(this.attach_DbDigitalGoods), new Action<DbDigitalGood>(this.detach_DbDigitalGoods));
			this._DbOrderTransactions = new EntitySet<DbOrderTransaction>(new Action<DbOrderTransaction>(this.attach_DbOrderTransactions), new Action<DbOrderTransaction>(this.detach_DbOrderTransactions));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerUID
		{
			get
			{
				return this._CustomerUID;
			}
			set
			{
				if ((this._CustomerUID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerUIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerUID = value;
					this.SendPropertyChanged("CustomerUID");
					this.OnCustomerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeMethod", DbType="TinyInt NOT NULL")]
		public byte ChargeMethod
		{
			get
			{
				return this._ChargeMethod;
			}
			set
			{
				if ((this._ChargeMethod != value))
				{
					this.OnChargeMethodChanging(value);
					this.SendPropertyChanging();
					this._ChargeMethod = value;
					this.SendPropertyChanged("ChargeMethod");
					this.OnChargeMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeStatus", DbType="TinyInt NOT NULL")]
		public byte ChargeStatus
		{
			get
			{
				return this._ChargeStatus;
			}
			set
			{
				if ((this._ChargeStatus != value))
				{
					this.OnChargeStatusChanging(value);
					this.SendPropertyChanging();
					this._ChargeStatus = value;
					this.SendPropertyChanged("ChargeStatus");
					this.OnChargeStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeAmount", DbType="Money NOT NULL")]
		public decimal ChargeAmount
		{
			get
			{
				return this._ChargeAmount;
			}
			set
			{
				if ((this._ChargeAmount != value))
				{
					this.OnChargeAmountChanging(value);
					this.SendPropertyChanging();
					this._ChargeAmount = value;
					this.SendPropertyChanged("ChargeAmount");
					this.OnChargeAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbOrderItem", Storage="_DbOrderItems", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<DbOrderItem> DbOrderItems
		{
			get
			{
				return this._DbOrderItems;
			}
			set
			{
				this._DbOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbBasket", Storage="_DbBaskets", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<DbBasket> DbBaskets
		{
			get
			{
				return this._DbBaskets;
			}
			set
			{
				this._DbBaskets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbDigitalGood", Storage="_DbDigitalGoods", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<DbDigitalGood> DbDigitalGoods
		{
			get
			{
				return this._DbDigitalGoods;
			}
			set
			{
				this._DbDigitalGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbOrderTransaction", Storage="_DbOrderTransactions", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<DbOrderTransaction> DbOrderTransactions
		{
			get
			{
				return this._DbOrderTransactions;
			}
			set
			{
				this._DbOrderTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbOrder", Storage="_aspnet_User", ThisKey="CustomerUID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.DbOrders.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.DbOrders.Add(this);
						this._CustomerUID = value.UserId;
					}
					else
					{
						this._CustomerUID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbOrderItems(DbOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = this;
		}
		
		private void detach_DbOrderItems(DbOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = null;
		}
		
		private void attach_DbBaskets(DbBasket entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = this;
		}
		
		private void detach_DbBaskets(DbBasket entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = null;
		}
		
		private void attach_DbDigitalGoods(DbDigitalGood entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = this;
		}
		
		private void detach_DbDigitalGoods(DbDigitalGood entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = null;
		}
		
		private void attach_DbOrderTransactions(DbOrderTransaction entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = this;
		}
		
		private void detach_DbOrderTransactions(DbOrderTransaction entity)
		{
			this.SendPropertyChanging();
			entity.DbOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Baskets")]
	public partial class DbBasket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.Guid> _CustomerUID;
		
		private string _Name;
		
		private System.Nullable<int> _OrderID;
		
		private byte _Status;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbBasketItem> _DbBasketItems;
		
		private EntityRef<DbOrder> _DbOrder;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerUIDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbBasket()
		{
			this._DbBasketItems = new EntitySet<DbBasketItem>(new Action<DbBasketItem>(this.attach_DbBasketItems), new Action<DbBasketItem>(this.detach_DbBasketItems));
			this._DbOrder = default(EntityRef<DbOrder>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CustomerUID
		{
			get
			{
				return this._CustomerUID;
			}
			set
			{
				if ((this._CustomerUID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerUIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerUID = value;
					this.SendPropertyChanged("CustomerUID");
					this.OnCustomerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
		public System.Nullable<int> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._DbOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbBasket_DbBasketItem", Storage="_DbBasketItems", ThisKey="ID", OtherKey="BasketID")]
		public EntitySet<DbBasketItem> DbBasketItems
		{
			get
			{
				return this._DbBasketItems;
			}
			set
			{
				this._DbBasketItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbBasket", Storage="_DbOrder", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public DbOrder DbOrder
		{
			get
			{
				return this._DbOrder.Entity;
			}
			set
			{
				DbOrder previousValue = this._DbOrder.Entity;
				if (((previousValue != value) 
							|| (this._DbOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbOrder.Entity = null;
						previousValue.DbBaskets.Remove(this);
					}
					this._DbOrder.Entity = value;
					if ((value != null))
					{
						value.DbBaskets.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DbOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbBasket", Storage="_aspnet_User", ThisKey="CustomerUID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.DbBaskets.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.DbBaskets.Add(this);
						this._CustomerUID = value.UserId;
					}
					else
					{
						this._CustomerUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbBasketItems(DbBasketItem entity)
		{
			this.SendPropertyChanging();
			entity.DbBasket = this;
		}
		
		private void detach_DbBasketItems(DbBasketItem entity)
		{
			this.SendPropertyChanging();
			entity.DbBasket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DigitalGoodsDownloadLog")]
	public partial class DbDigitalGoodsDownloadLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DigitalGoodID;
		
		private string _IPAddress;
		
		private System.Guid _CustomerUID;
		
		private string _HttpReferrer;
		
		private string _ClientName;
		
		private System.DateTime _Created;
		
		private EntityRef<DbDigitalGood> _DbDigitalGood;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDigitalGoodIDChanging(int value);
    partial void OnDigitalGoodIDChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnCustomerUIDChanging(System.Guid value);
    partial void OnCustomerUIDChanged();
    partial void OnHttpReferrerChanging(string value);
    partial void OnHttpReferrerChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public DbDigitalGoodsDownloadLog()
		{
			this._DbDigitalGood = default(EntityRef<DbDigitalGood>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DigitalGoodID", DbType="Int NOT NULL")]
		public int DigitalGoodID
		{
			get
			{
				return this._DigitalGoodID;
			}
			set
			{
				if ((this._DigitalGoodID != value))
				{
					if (this._DbDigitalGood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDigitalGoodIDChanging(value);
					this.SendPropertyChanging();
					this._DigitalGoodID = value;
					this.SendPropertyChanged("DigitalGoodID");
					this.OnDigitalGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerUID
		{
			get
			{
				return this._CustomerUID;
			}
			set
			{
				if ((this._CustomerUID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerUIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerUID = value;
					this.SendPropertyChanged("CustomerUID");
					this.OnCustomerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HttpReferrer", DbType="VarChar(512)")]
		public string HttpReferrer
		{
			get
			{
				return this._HttpReferrer;
			}
			set
			{
				if ((this._HttpReferrer != value))
				{
					this.OnHttpReferrerChanging(value);
					this.SendPropertyChanging();
					this._HttpReferrer = value;
					this.SendPropertyChanged("HttpReferrer");
					this.OnHttpReferrerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(512)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbDigitalGood_DbDigitalGoodsDownloadLog", Storage="_DbDigitalGood", ThisKey="DigitalGoodID", OtherKey="ID", IsForeignKey=true)]
		public DbDigitalGood DbDigitalGood
		{
			get
			{
				return this._DbDigitalGood.Entity;
			}
			set
			{
				DbDigitalGood previousValue = this._DbDigitalGood.Entity;
				if (((previousValue != value) 
							|| (this._DbDigitalGood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbDigitalGood.Entity = null;
						previousValue.DbDigitalGoodsDownloadLogs.Remove(this);
					}
					this._DbDigitalGood.Entity = value;
					if ((value != null))
					{
						value.DbDigitalGoodsDownloadLogs.Add(this);
						this._DigitalGoodID = value.ID;
					}
					else
					{
						this._DigitalGoodID = default(int);
					}
					this.SendPropertyChanged("DbDigitalGood");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbDigitalGoodsDownloadLog", Storage="_aspnet_User", ThisKey="CustomerUID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.DbDigitalGoodsDownloadLogs.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.DbDigitalGoodsDownloadLogs.Add(this);
						this._CustomerUID = value.UserId;
					}
					else
					{
						this._CustomerUID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DigitalGoods")]
	public partial class DbDigitalGood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _OrderID;
		
		private System.Nullable<int> _OrderItemID;
		
		private byte _Type;
		
		private string _Filename;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<long> _Filesize;
		
		private bool _FileExists;
		
		private System.Nullable<System.DateTime> _FileCreationDate;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbDigitalGoodsDownloadLog> _DbDigitalGoodsDownloadLogs;
		
		private EntityRef<DbOrderItem> _DbOrderItem;
		
		private EntityRef<DbOrder> _DbOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnOrderItemIDChanging(System.Nullable<int> value);
    partial void OnOrderItemIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnFilesizeChanging(System.Nullable<long> value);
    partial void OnFilesizeChanged();
    partial void OnFileExistsChanging(bool value);
    partial void OnFileExistsChanged();
    partial void OnFileCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFileCreationDateChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbDigitalGood()
		{
			this._DbDigitalGoodsDownloadLogs = new EntitySet<DbDigitalGoodsDownloadLog>(new Action<DbDigitalGoodsDownloadLog>(this.attach_DbDigitalGoodsDownloadLogs), new Action<DbDigitalGoodsDownloadLog>(this.detach_DbDigitalGoodsDownloadLogs));
			this._DbOrderItem = default(EntityRef<DbOrderItem>);
			this._DbOrder = default(EntityRef<DbOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
		public System.Nullable<int> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._DbOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderItemID", DbType="Int")]
		public System.Nullable<int> OrderItemID
		{
			get
			{
				return this._OrderItemID;
			}
			set
			{
				if ((this._OrderItemID != value))
				{
					if (this._DbOrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderItemIDChanging(value);
					this.SendPropertyChanging();
					this._OrderItemID = value;
					this.SendPropertyChanged("OrderItemID");
					this.OnOrderItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(50)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filesize", DbType="BigInt")]
		public System.Nullable<long> Filesize
		{
			get
			{
				return this._Filesize;
			}
			set
			{
				if ((this._Filesize != value))
				{
					this.OnFilesizeChanging(value);
					this.SendPropertyChanging();
					this._Filesize = value;
					this.SendPropertyChanged("Filesize");
					this.OnFilesizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileExists", DbType="Bit NOT NULL")]
		public bool FileExists
		{
			get
			{
				return this._FileExists;
			}
			set
			{
				if ((this._FileExists != value))
				{
					this.OnFileExistsChanging(value);
					this.SendPropertyChanging();
					this._FileExists = value;
					this.SendPropertyChanged("FileExists");
					this.OnFileExistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileCreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FileCreationDate
		{
			get
			{
				return this._FileCreationDate;
			}
			set
			{
				if ((this._FileCreationDate != value))
				{
					this.OnFileCreationDateChanging(value);
					this.SendPropertyChanging();
					this._FileCreationDate = value;
					this.SendPropertyChanged("FileCreationDate");
					this.OnFileCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbDigitalGood_DbDigitalGoodsDownloadLog", Storage="_DbDigitalGoodsDownloadLogs", ThisKey="ID", OtherKey="DigitalGoodID")]
		public EntitySet<DbDigitalGoodsDownloadLog> DbDigitalGoodsDownloadLogs
		{
			get
			{
				return this._DbDigitalGoodsDownloadLogs;
			}
			set
			{
				this._DbDigitalGoodsDownloadLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrderItem_DbDigitalGood", Storage="_DbOrderItem", ThisKey="OrderItemID", OtherKey="ID", IsForeignKey=true)]
		public DbOrderItem DbOrderItem
		{
			get
			{
				return this._DbOrderItem.Entity;
			}
			set
			{
				DbOrderItem previousValue = this._DbOrderItem.Entity;
				if (((previousValue != value) 
							|| (this._DbOrderItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbOrderItem.Entity = null;
						previousValue.DbDigitalGoods.Remove(this);
					}
					this._DbOrderItem.Entity = value;
					if ((value != null))
					{
						value.DbDigitalGoods.Add(this);
						this._OrderItemID = value.ID;
					}
					else
					{
						this._OrderItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DbOrderItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbDigitalGood", Storage="_DbOrder", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public DbOrder DbOrder
		{
			get
			{
				return this._DbOrder.Entity;
			}
			set
			{
				DbOrder previousValue = this._DbOrder.Entity;
				if (((previousValue != value) 
							|| (this._DbOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbOrder.Entity = null;
						previousValue.DbDigitalGoods.Remove(this);
					}
					this._DbOrder.Entity = value;
					if ((value != null))
					{
						value.DbDigitalGoods.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DbOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbDigitalGoodsDownloadLogs(DbDigitalGoodsDownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.DbDigitalGood = this;
		}
		
		private void detach_DbDigitalGoodsDownloadLogs(DbDigitalGoodsDownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.DbDigitalGood = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photos")]
	public partial class DbPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Filename;
		
		private string _Name;
		
		private string _Comment;
		
		private string _Tags;
		
		private long _Filesize;
		
		private int _Width;
		
		private int _Height;
		
		private byte _Aspect;
		
		private int _PartnerID;
		
		private System.Nullable<System.Guid> _PhotographerUID;
		
		private int _RateCardID;
		
		private long _CustomerViews;
		
		private byte _Status;
		
		private System.Nullable<System.DateTime> _DateCaptured;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbCollectionPhoto> _DbCollectionPhotos;
		
		private EntitySet<DbBasketItem> _DbBasketItems;
		
		private EntitySet<DbOrderItem> _DbOrderItems;
		
		private EntityRef<DbRateCard> _DbRateCard;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<DbPartner> _DbPartner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnFilesizeChanging(long value);
    partial void OnFilesizeChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnAspectChanging(byte value);
    partial void OnAspectChanged();
    partial void OnPartnerIDChanging(int value);
    partial void OnPartnerIDChanged();
    partial void OnPhotographerUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotographerUIDChanged();
    partial void OnRateCardIDChanging(int value);
    partial void OnRateCardIDChanged();
    partial void OnCustomerViewsChanging(long value);
    partial void OnCustomerViewsChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnDateCapturedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCapturedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbPhoto()
		{
			this._DbCollectionPhotos = new EntitySet<DbCollectionPhoto>(new Action<DbCollectionPhoto>(this.attach_DbCollectionPhotos), new Action<DbCollectionPhoto>(this.detach_DbCollectionPhotos));
			this._DbBasketItems = new EntitySet<DbBasketItem>(new Action<DbBasketItem>(this.attach_DbBasketItems), new Action<DbBasketItem>(this.detach_DbBasketItems));
			this._DbOrderItems = new EntitySet<DbOrderItem>(new Action<DbOrderItem>(this.attach_DbOrderItems), new Action<DbOrderItem>(this.detach_DbOrderItems));
			this._DbRateCard = default(EntityRef<DbRateCard>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._DbPartner = default(EntityRef<DbPartner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filesize", DbType="BigInt NOT NULL")]
		public long Filesize
		{
			get
			{
				return this._Filesize;
			}
			set
			{
				if ((this._Filesize != value))
				{
					this.OnFilesizeChanging(value);
					this.SendPropertyChanging();
					this._Filesize = value;
					this.SendPropertyChanged("Filesize");
					this.OnFilesizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aspect", DbType="TinyInt NOT NULL")]
		public byte Aspect
		{
			get
			{
				return this._Aspect;
			}
			set
			{
				if ((this._Aspect != value))
				{
					this.OnAspectChanging(value);
					this.SendPropertyChanging();
					this._Aspect = value;
					this.SendPropertyChanged("Aspect");
					this.OnAspectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._DbPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotographerUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotographerUID
		{
			get
			{
				return this._PhotographerUID;
			}
			set
			{
				if ((this._PhotographerUID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotographerUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotographerUID = value;
					this.SendPropertyChanged("PhotographerUID");
					this.OnPhotographerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateCardID", DbType="Int NOT NULL")]
		public int RateCardID
		{
			get
			{
				return this._RateCardID;
			}
			set
			{
				if ((this._RateCardID != value))
				{
					if (this._DbRateCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateCardIDChanging(value);
					this.SendPropertyChanging();
					this._RateCardID = value;
					this.SendPropertyChanged("RateCardID");
					this.OnRateCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerViews", DbType="BigInt NOT NULL")]
		public long CustomerViews
		{
			get
			{
				return this._CustomerViews;
			}
			set
			{
				if ((this._CustomerViews != value))
				{
					this.OnCustomerViewsChanging(value);
					this.SendPropertyChanging();
					this._CustomerViews = value;
					this.SendPropertyChanged("CustomerViews");
					this.OnCustomerViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCaptured", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCaptured
		{
			get
			{
				return this._DateCaptured;
			}
			set
			{
				if ((this._DateCaptured != value))
				{
					this.OnDateCapturedChanging(value);
					this.SendPropertyChanging();
					this._DateCaptured = value;
					this.SendPropertyChanged("DateCaptured");
					this.OnDateCapturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPhoto_DbCollectionPhoto", Storage="_DbCollectionPhotos", ThisKey="ID", OtherKey="PhotoID")]
		public EntitySet<DbCollectionPhoto> DbCollectionPhotos
		{
			get
			{
				return this._DbCollectionPhotos;
			}
			set
			{
				this._DbCollectionPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPhoto_DbBasketItem", Storage="_DbBasketItems", ThisKey="ID", OtherKey="PhotoID")]
		public EntitySet<DbBasketItem> DbBasketItems
		{
			get
			{
				return this._DbBasketItems;
			}
			set
			{
				this._DbBasketItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPhoto_DbOrderItem", Storage="_DbOrderItems", ThisKey="ID", OtherKey="PhotoID")]
		public EntitySet<DbOrderItem> DbOrderItems
		{
			get
			{
				return this._DbOrderItems;
			}
			set
			{
				this._DbOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbRateCard_DbPhoto", Storage="_DbRateCard", ThisKey="RateCardID", OtherKey="ID", IsForeignKey=true)]
		public DbRateCard DbRateCard
		{
			get
			{
				return this._DbRateCard.Entity;
			}
			set
			{
				DbRateCard previousValue = this._DbRateCard.Entity;
				if (((previousValue != value) 
							|| (this._DbRateCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbRateCard.Entity = null;
						previousValue.DbPhotos.Remove(this);
					}
					this._DbRateCard.Entity = value;
					if ((value != null))
					{
						value.DbPhotos.Add(this);
						this._RateCardID = value.ID;
					}
					else
					{
						this._RateCardID = default(int);
					}
					this.SendPropertyChanged("DbRateCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbPhoto", Storage="_aspnet_User", ThisKey="PhotographerUID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.DbPhotos.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.DbPhotos.Add(this);
						this._PhotographerUID = value.UserId;
					}
					else
					{
						this._PhotographerUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPartner_DbPhoto", Storage="_DbPartner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public DbPartner DbPartner
		{
			get
			{
				return this._DbPartner.Entity;
			}
			set
			{
				DbPartner previousValue = this._DbPartner.Entity;
				if (((previousValue != value) 
							|| (this._DbPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbPartner.Entity = null;
						previousValue.DbPhotos.Remove(this);
					}
					this._DbPartner.Entity = value;
					if ((value != null))
					{
						value.DbPhotos.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(int);
					}
					this.SendPropertyChanged("DbPartner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbCollectionPhotos(DbCollectionPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbPhoto = this;
		}
		
		private void detach_DbCollectionPhotos(DbCollectionPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbPhoto = null;
		}
		
		private void attach_DbBasketItems(DbBasketItem entity)
		{
			this.SendPropertyChanging();
			entity.DbPhoto = this;
		}
		
		private void detach_DbBasketItems(DbBasketItem entity)
		{
			this.SendPropertyChanging();
			entity.DbPhoto = null;
		}
		
		private void attach_DbOrderItems(DbOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.DbPhoto = this;
		}
		
		private void detach_DbOrderItems(DbOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.DbPhoto = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Licenses")]
	public partial class DbLicense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ShortDescription;
		
		private string _Description;
		
		private int _PrimaryDimension;
		
		private byte _Status;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbRateCardItem> _DbRateCardItems;
		
		private EntitySet<DbBasketItem> _DbBasketItems;
		
		private EntitySet<DbOrderItem> _DbOrderItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPrimaryDimensionChanging(int value);
    partial void OnPrimaryDimensionChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbLicense()
		{
			this._DbRateCardItems = new EntitySet<DbRateCardItem>(new Action<DbRateCardItem>(this.attach_DbRateCardItems), new Action<DbRateCardItem>(this.detach_DbRateCardItems));
			this._DbBasketItems = new EntitySet<DbBasketItem>(new Action<DbBasketItem>(this.attach_DbBasketItems), new Action<DbBasketItem>(this.detach_DbBasketItems));
			this._DbOrderItems = new EntitySet<DbOrderItem>(new Action<DbOrderItem>(this.attach_DbOrderItems), new Action<DbOrderItem>(this.detach_DbOrderItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="VarChar(300)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryDimension", DbType="Int NOT NULL")]
		public int PrimaryDimension
		{
			get
			{
				return this._PrimaryDimension;
			}
			set
			{
				if ((this._PrimaryDimension != value))
				{
					this.OnPrimaryDimensionChanging(value);
					this.SendPropertyChanging();
					this._PrimaryDimension = value;
					this.SendPropertyChanged("PrimaryDimension");
					this.OnPrimaryDimensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbLicense_DbRateCardItem", Storage="_DbRateCardItems", ThisKey="ID", OtherKey="LicenseID")]
		public EntitySet<DbRateCardItem> DbRateCardItems
		{
			get
			{
				return this._DbRateCardItems;
			}
			set
			{
				this._DbRateCardItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbLicense_DbBasketItem", Storage="_DbBasketItems", ThisKey="ID", OtherKey="LicenseID")]
		public EntitySet<DbBasketItem> DbBasketItems
		{
			get
			{
				return this._DbBasketItems;
			}
			set
			{
				this._DbBasketItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbLicense_DbOrderItem", Storage="_DbOrderItems", ThisKey="ID", OtherKey="LicenseID")]
		public EntitySet<DbOrderItem> DbOrderItems
		{
			get
			{
				return this._DbOrderItems;
			}
			set
			{
				this._DbOrderItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbRateCardItems(DbRateCardItem entity)
		{
			this.SendPropertyChanging();
			entity.DbLicense = this;
		}
		
		private void detach_DbRateCardItems(DbRateCardItem entity)
		{
			this.SendPropertyChanging();
			entity.DbLicense = null;
		}
		
		private void attach_DbBasketItems(DbBasketItem entity)
		{
			this.SendPropertyChanging();
			entity.DbLicense = this;
		}
		
		private void detach_DbBasketItems(DbBasketItem entity)
		{
			this.SendPropertyChanging();
			entity.DbLicense = null;
		}
		
		private void attach_DbOrderItems(DbOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.DbLicense = this;
		}
		
		private void detach_DbOrderItems(DbOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.DbLicense = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<DbCompanyStaff> _DbCompanyStaffs;
		
		private EntitySet<DbOrder> _DbOrders;
		
		private EntitySet<DbBasket> _DbBaskets;
		
		private EntitySet<DbDigitalGoodsDownloadLog> _DbDigitalGoodsDownloadLogs;
		
		private EntitySet<DbPhoto> _DbPhotos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._DbCompanyStaffs = new EntitySet<DbCompanyStaff>(new Action<DbCompanyStaff>(this.attach_DbCompanyStaffs), new Action<DbCompanyStaff>(this.detach_DbCompanyStaffs));
			this._DbOrders = new EntitySet<DbOrder>(new Action<DbOrder>(this.attach_DbOrders), new Action<DbOrder>(this.detach_DbOrders));
			this._DbBaskets = new EntitySet<DbBasket>(new Action<DbBasket>(this.attach_DbBaskets), new Action<DbBasket>(this.detach_DbBaskets));
			this._DbDigitalGoodsDownloadLogs = new EntitySet<DbDigitalGoodsDownloadLog>(new Action<DbDigitalGoodsDownloadLog>(this.attach_DbDigitalGoodsDownloadLogs), new Action<DbDigitalGoodsDownloadLog>(this.detach_DbDigitalGoodsDownloadLogs));
			this._DbPhotos = new EntitySet<DbPhoto>(new Action<DbPhoto>(this.attach_DbPhotos), new Action<DbPhoto>(this.detach_DbPhotos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbCompanyStaff", Storage="_DbCompanyStaffs", ThisKey="UserId", OtherKey="PersonUID")]
		public EntitySet<DbCompanyStaff> DbCompanyStaffs
		{
			get
			{
				return this._DbCompanyStaffs;
			}
			set
			{
				this._DbCompanyStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbOrder", Storage="_DbOrders", ThisKey="UserId", OtherKey="CustomerUID")]
		public EntitySet<DbOrder> DbOrders
		{
			get
			{
				return this._DbOrders;
			}
			set
			{
				this._DbOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbBasket", Storage="_DbBaskets", ThisKey="UserId", OtherKey="CustomerUID")]
		public EntitySet<DbBasket> DbBaskets
		{
			get
			{
				return this._DbBaskets;
			}
			set
			{
				this._DbBaskets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbDigitalGoodsDownloadLog", Storage="_DbDigitalGoodsDownloadLogs", ThisKey="UserId", OtherKey="CustomerUID")]
		public EntitySet<DbDigitalGoodsDownloadLog> DbDigitalGoodsDownloadLogs
		{
			get
			{
				return this._DbDigitalGoodsDownloadLogs;
			}
			set
			{
				this._DbDigitalGoodsDownloadLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DbPhoto", Storage="_DbPhotos", ThisKey="UserId", OtherKey="PhotographerUID")]
		public EntitySet<DbPhoto> DbPhotos
		{
			get
			{
				return this._DbPhotos;
			}
			set
			{
				this._DbPhotos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbCompanyStaffs(DbCompanyStaff entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_DbCompanyStaffs(DbCompanyStaff entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_DbOrders(DbOrder entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_DbOrders(DbOrder entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_DbBaskets(DbBasket entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_DbBaskets(DbBasket entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_DbDigitalGoodsDownloadLogs(DbDigitalGoodsDownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_DbDigitalGoodsDownloadLogs(DbDigitalGoodsDownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_DbPhotos(DbPhoto entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_DbPhotos(DbPhoto entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Searches")]
	public partial class Search
	{
		
		private string _Term;
		
		private System.Nullable<System.DateTime> _CapturedFrom;
		
		private System.Nullable<System.DateTime> _CapturedUntil;
		
		private byte _Property;
		
		private System.Nullable<System.Guid> _UserUID;
		
		private int _Results;
		
		private System.DateTime _Created;
		
		public Search()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this._Term = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapturedFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> CapturedFrom
		{
			get
			{
				return this._CapturedFrom;
			}
			set
			{
				if ((this._CapturedFrom != value))
				{
					this._CapturedFrom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapturedUntil", DbType="DateTime")]
		public System.Nullable<System.DateTime> CapturedUntil
		{
			get
			{
				return this._CapturedUntil;
			}
			set
			{
				if ((this._CapturedUntil != value))
				{
					this._CapturedUntil = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property", DbType="TinyInt NOT NULL")]
		public byte Property
		{
			get
			{
				return this._Property;
			}
			set
			{
				if ((this._Property != value))
				{
					this._Property = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserUID
		{
			get
			{
				return this._UserUID;
			}
			set
			{
				if ((this._UserUID != value))
				{
					this._UserUID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Results", DbType="Int NOT NULL")]
		public int Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				if ((this._Results != value))
				{
					this._Results = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class DbCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Telephone;
		
		private string _Fax;
		
		private string _Address;
		
		private string _PostalCode;
		
		private System.Nullable<int> _CountryID;
		
		private string _Url;
		
		private byte _ChargeMethod;
		
		private byte _Status;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbCompanyStaff> _DbCompanyStaffs;
		
		private EntitySet<DbPartner> _DbPartners;
		
		private EntityRef<DbCountry> _DbCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnChargeMethodChanging(byte value);
    partial void OnChargeMethodChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbCompany()
		{
			this._DbCompanyStaffs = new EntitySet<DbCompanyStaff>(new Action<DbCompanyStaff>(this.attach_DbCompanyStaffs), new Action<DbCompanyStaff>(this.detach_DbCompanyStaffs));
			this._DbPartners = new EntitySet<DbPartner>(new Action<DbPartner>(this.attach_DbPartners), new Action<DbPartner>(this.detach_DbPartners));
			this._DbCountry = default(EntityRef<DbCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(20)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._DbCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(255)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeMethod", DbType="TinyInt NOT NULL")]
		public byte ChargeMethod
		{
			get
			{
				return this._ChargeMethod;
			}
			set
			{
				if ((this._ChargeMethod != value))
				{
					this.OnChargeMethodChanging(value);
					this.SendPropertyChanging();
					this._ChargeMethod = value;
					this.SendPropertyChanged("ChargeMethod");
					this.OnChargeMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCompany_DbCompanyStaff", Storage="_DbCompanyStaffs", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<DbCompanyStaff> DbCompanyStaffs
		{
			get
			{
				return this._DbCompanyStaffs;
			}
			set
			{
				this._DbCompanyStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCompany_DbPartner", Storage="_DbPartners", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<DbPartner> DbPartners
		{
			get
			{
				return this._DbPartners;
			}
			set
			{
				this._DbPartners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCountry_DbCompany", Storage="_DbCountry", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public DbCountry DbCountry
		{
			get
			{
				return this._DbCountry.Entity;
			}
			set
			{
				DbCountry previousValue = this._DbCountry.Entity;
				if (((previousValue != value) 
							|| (this._DbCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbCountry.Entity = null;
						previousValue.DbCompanies.Remove(this);
					}
					this._DbCountry.Entity = value;
					if ((value != null))
					{
						value.DbCompanies.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DbCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbCompanyStaffs(DbCompanyStaff entity)
		{
			this.SendPropertyChanging();
			entity.DbCompany = this;
		}
		
		private void detach_DbCompanyStaffs(DbCompanyStaff entity)
		{
			this.SendPropertyChanging();
			entity.DbCompany = null;
		}
		
		private void attach_DbPartners(DbPartner entity)
		{
			this.SendPropertyChanging();
			entity.DbCompany = this;
		}
		
		private void detach_DbPartners(DbPartner entity)
		{
			this.SendPropertyChanging();
			entity.DbCompany = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTransactions")]
	public partial class DbOrderTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrderID;
		
		private byte _Type;
		
		private string _GC_OrderNumber;
		
		private string _GC_NewFinanceState;
		
		private string _GC_NewFulfillmentState;
		
		private string _GC_PrevFinanceState;
		
		private string _GC_PrevFulfillmentState;
		
		private System.Nullable<decimal> _GC_ChargedAmount;
		
		private System.Nullable<decimal> _GC_RefundedAmount;
		
		private System.Nullable<decimal> _GC_ChargebackAmount;
		
		private System.Nullable<System.Guid> _MemberUID;
		
		private string _Operation;
		
		private string _ClientIPAddress;
		
		private System.DateTime _Created;
		
		private EntityRef<DbOrder> _DbOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnGC_OrderNumberChanging(string value);
    partial void OnGC_OrderNumberChanged();
    partial void OnGC_NewFinanceStateChanging(string value);
    partial void OnGC_NewFinanceStateChanged();
    partial void OnGC_NewFulfillmentStateChanging(string value);
    partial void OnGC_NewFulfillmentStateChanged();
    partial void OnGC_PrevFinanceStateChanging(string value);
    partial void OnGC_PrevFinanceStateChanged();
    partial void OnGC_PrevFulfillmentStateChanging(string value);
    partial void OnGC_PrevFulfillmentStateChanged();
    partial void OnGC_ChargedAmountChanging(System.Nullable<decimal> value);
    partial void OnGC_ChargedAmountChanged();
    partial void OnGC_RefundedAmountChanging(System.Nullable<decimal> value);
    partial void OnGC_RefundedAmountChanged();
    partial void OnGC_ChargebackAmountChanging(System.Nullable<decimal> value);
    partial void OnGC_ChargebackAmountChanged();
    partial void OnMemberUIDChanging(System.Nullable<System.Guid> value);
    partial void OnMemberUIDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnClientIPAddressChanging(string value);
    partial void OnClientIPAddressChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public DbOrderTransaction()
		{
			this._DbOrder = default(EntityRef<DbOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._DbOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_OrderNumber", DbType="VarChar(50)")]
		public string GC_OrderNumber
		{
			get
			{
				return this._GC_OrderNumber;
			}
			set
			{
				if ((this._GC_OrderNumber != value))
				{
					this.OnGC_OrderNumberChanging(value);
					this.SendPropertyChanging();
					this._GC_OrderNumber = value;
					this.SendPropertyChanged("GC_OrderNumber");
					this.OnGC_OrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_NewFinanceState", DbType="VarChar(50)")]
		public string GC_NewFinanceState
		{
			get
			{
				return this._GC_NewFinanceState;
			}
			set
			{
				if ((this._GC_NewFinanceState != value))
				{
					this.OnGC_NewFinanceStateChanging(value);
					this.SendPropertyChanging();
					this._GC_NewFinanceState = value;
					this.SendPropertyChanged("GC_NewFinanceState");
					this.OnGC_NewFinanceStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_NewFulfillmentState", DbType="VarChar(50)")]
		public string GC_NewFulfillmentState
		{
			get
			{
				return this._GC_NewFulfillmentState;
			}
			set
			{
				if ((this._GC_NewFulfillmentState != value))
				{
					this.OnGC_NewFulfillmentStateChanging(value);
					this.SendPropertyChanging();
					this._GC_NewFulfillmentState = value;
					this.SendPropertyChanged("GC_NewFulfillmentState");
					this.OnGC_NewFulfillmentStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_PrevFinanceState", DbType="VarChar(50)")]
		public string GC_PrevFinanceState
		{
			get
			{
				return this._GC_PrevFinanceState;
			}
			set
			{
				if ((this._GC_PrevFinanceState != value))
				{
					this.OnGC_PrevFinanceStateChanging(value);
					this.SendPropertyChanging();
					this._GC_PrevFinanceState = value;
					this.SendPropertyChanged("GC_PrevFinanceState");
					this.OnGC_PrevFinanceStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_PrevFulfillmentState", DbType="VarChar(50)")]
		public string GC_PrevFulfillmentState
		{
			get
			{
				return this._GC_PrevFulfillmentState;
			}
			set
			{
				if ((this._GC_PrevFulfillmentState != value))
				{
					this.OnGC_PrevFulfillmentStateChanging(value);
					this.SendPropertyChanging();
					this._GC_PrevFulfillmentState = value;
					this.SendPropertyChanged("GC_PrevFulfillmentState");
					this.OnGC_PrevFulfillmentStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_ChargedAmount", DbType="Money")]
		public System.Nullable<decimal> GC_ChargedAmount
		{
			get
			{
				return this._GC_ChargedAmount;
			}
			set
			{
				if ((this._GC_ChargedAmount != value))
				{
					this.OnGC_ChargedAmountChanging(value);
					this.SendPropertyChanging();
					this._GC_ChargedAmount = value;
					this.SendPropertyChanged("GC_ChargedAmount");
					this.OnGC_ChargedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_RefundedAmount", DbType="Money")]
		public System.Nullable<decimal> GC_RefundedAmount
		{
			get
			{
				return this._GC_RefundedAmount;
			}
			set
			{
				if ((this._GC_RefundedAmount != value))
				{
					this.OnGC_RefundedAmountChanging(value);
					this.SendPropertyChanging();
					this._GC_RefundedAmount = value;
					this.SendPropertyChanged("GC_RefundedAmount");
					this.OnGC_RefundedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GC_ChargebackAmount", DbType="Money")]
		public System.Nullable<decimal> GC_ChargebackAmount
		{
			get
			{
				return this._GC_ChargebackAmount;
			}
			set
			{
				if ((this._GC_ChargebackAmount != value))
				{
					this.OnGC_ChargebackAmountChanging(value);
					this.SendPropertyChanging();
					this._GC_ChargebackAmount = value;
					this.SendPropertyChanged("GC_ChargebackAmount");
					this.OnGC_ChargebackAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MemberUID
		{
			get
			{
				return this._MemberUID;
			}
			set
			{
				if ((this._MemberUID != value))
				{
					this.OnMemberUIDChanging(value);
					this.SendPropertyChanging();
					this._MemberUID = value;
					this.SendPropertyChanged("MemberUID");
					this.OnMemberUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="VarChar(1000)")]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientIPAddress", DbType="Char(15)")]
		public string ClientIPAddress
		{
			get
			{
				return this._ClientIPAddress;
			}
			set
			{
				if ((this._ClientIPAddress != value))
				{
					this.OnClientIPAddressChanging(value);
					this.SendPropertyChanging();
					this._ClientIPAddress = value;
					this.SendPropertyChanged("ClientIPAddress");
					this.OnClientIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbOrder_DbOrderTransaction", Storage="_DbOrder", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public DbOrder DbOrder
		{
			get
			{
				return this._DbOrder.Entity;
			}
			set
			{
				DbOrder previousValue = this._DbOrder.Entity;
				if (((previousValue != value) 
							|| (this._DbOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbOrder.Entity = null;
						previousValue.DbOrderTransactions.Remove(this);
					}
					this._DbOrder.Entity = value;
					if ((value != null))
					{
						value.DbOrderTransactions.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("DbOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partners")]
	public partial class DbPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _LogoFilename;
		
		private System.Nullable<int> _CompanyID;
		
		private byte _Status;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private EntitySet<DbCollection> _DbCollections;
		
		private EntitySet<DbRateCard> _DbRateCards;
		
		private EntitySet<DbPhoto> _DbPhotos;
		
		private EntityRef<DbCompany> _DbCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLogoFilenameChanging(string value);
    partial void OnLogoFilenameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public DbPartner()
		{
			this._DbCollections = new EntitySet<DbCollection>(new Action<DbCollection>(this.attach_DbCollections), new Action<DbCollection>(this.detach_DbCollections));
			this._DbRateCards = new EntitySet<DbRateCard>(new Action<DbRateCard>(this.attach_DbRateCards), new Action<DbRateCard>(this.detach_DbRateCards));
			this._DbPhotos = new EntitySet<DbPhoto>(new Action<DbPhoto>(this.attach_DbPhotos), new Action<DbPhoto>(this.detach_DbPhotos));
			this._DbCompany = default(EntityRef<DbCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoFilename", DbType="VarChar(255)")]
		public string LogoFilename
		{
			get
			{
				return this._LogoFilename;
			}
			set
			{
				if ((this._LogoFilename != value))
				{
					this.OnLogoFilenameChanging(value);
					this.SendPropertyChanging();
					this._LogoFilename = value;
					this.SendPropertyChanged("LogoFilename");
					this.OnLogoFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._DbCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPartner_DbCollection", Storage="_DbCollections", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<DbCollection> DbCollections
		{
			get
			{
				return this._DbCollections;
			}
			set
			{
				this._DbCollections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPartner_DbRateCard", Storage="_DbRateCards", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<DbRateCard> DbRateCards
		{
			get
			{
				return this._DbRateCards;
			}
			set
			{
				this._DbRateCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbPartner_DbPhoto", Storage="_DbPhotos", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<DbPhoto> DbPhotos
		{
			get
			{
				return this._DbPhotos;
			}
			set
			{
				this._DbPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbCompany_DbPartner", Storage="_DbCompany", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public DbCompany DbCompany
		{
			get
			{
				return this._DbCompany.Entity;
			}
			set
			{
				DbCompany previousValue = this._DbCompany.Entity;
				if (((previousValue != value) 
							|| (this._DbCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbCompany.Entity = null;
						previousValue.DbPartners.Remove(this);
					}
					this._DbCompany.Entity = value;
					if ((value != null))
					{
						value.DbPartners.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DbCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbCollections(DbCollection entity)
		{
			this.SendPropertyChanging();
			entity.DbPartner = this;
		}
		
		private void detach_DbCollections(DbCollection entity)
		{
			this.SendPropertyChanging();
			entity.DbPartner = null;
		}
		
		private void attach_DbRateCards(DbRateCard entity)
		{
			this.SendPropertyChanging();
			entity.DbPartner = this;
		}
		
		private void detach_DbRateCards(DbRateCard entity)
		{
			this.SendPropertyChanging();
			entity.DbPartner = null;
		}
		
		private void attach_DbPhotos(DbPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbPartner = this;
		}
		
		private void detach_DbPhotos(DbPhoto entity)
		{
			this.SendPropertyChanging();
			entity.DbPartner = null;
		}
	}
	
	public partial class FindCollectionsByPhotoTagResult
	{
		
		private int _ID;
		
		public FindCollectionsByPhotoTagResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class FindCollectionsByNameResult
	{
		
		private int _ID;
		
		public FindCollectionsByNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class FindPhotosByTagResult
	{
		
		private int _ID;
		
		public FindPhotosByTagResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class FindPartnerCollectionsByTagResult
	{
		
		private int _ID;
		
		public FindPartnerCollectionsByTagResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class FindPartnerCollectionsByNameResult
	{
		
		private int _ID;
		
		public FindPartnerCollectionsByNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class GetCollectionPhotosResult
	{
		
		private int _ID;
		
		private string _Filename;
		
		private string _Name;
		
		private string _Comment;
		
		private string _Tags;
		
		private long _Filesize;
		
		private int _Width;
		
		private int _Height;
		
		private byte _Aspect;
		
		private int _PartnerID;
		
		private System.Nullable<System.Guid> _PhotographerUID;
		
		private int _RateCardID;
		
		private long _CustomerViews;
		
		private byte _Status;
		
		private System.Nullable<System.DateTime> _DateCaptured;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastUpdated;
		
		private int _Order;
		
		public GetCollectionPhotosResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this._Filename = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this._Tags = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filesize", DbType="BigInt NOT NULL")]
		public long Filesize
		{
			get
			{
				return this._Filesize;
			}
			set
			{
				if ((this._Filesize != value))
				{
					this._Filesize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this._Width = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this._Height = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aspect", DbType="TinyInt NOT NULL")]
		public byte Aspect
		{
			get
			{
				return this._Aspect;
			}
			set
			{
				if ((this._Aspect != value))
				{
					this._Aspect = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					this._PartnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotographerUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotographerUID
		{
			get
			{
				return this._PhotographerUID;
			}
			set
			{
				if ((this._PhotographerUID != value))
				{
					this._PhotographerUID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateCardID", DbType="Int NOT NULL")]
		public int RateCardID
		{
			get
			{
				return this._RateCardID;
			}
			set
			{
				if ((this._RateCardID != value))
				{
					this._RateCardID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerViews", DbType="BigInt NOT NULL")]
		public long CustomerViews
		{
			get
			{
				return this._CustomerViews;
			}
			set
			{
				if ((this._CustomerViews != value))
				{
					this._CustomerViews = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCaptured", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCaptured
		{
			get
			{
				return this._DateCaptured;
			}
			set
			{
				if ((this._DateCaptured != value))
				{
					this._DateCaptured = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this._LastUpdated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this._Order = value;
				}
			}
		}
	}
	
	public partial class GetPartnerTopSellingPhotosResult
	{
		
		private int _ID;
		
		private System.Nullable<int> _Sales;
		
		public GetPartnerTopSellingPhotosResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sales", DbType="Int")]
		public System.Nullable<int> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				if ((this._Sales != value))
				{
					this._Sales = value;
				}
			}
		}
	}
	
	public partial class GetTopSellingPhotosResult
	{
		
		private int _ID;
		
		private System.Nullable<int> _Sales;
		
		public GetTopSellingPhotosResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sales", DbType="Int")]
		public System.Nullable<int> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				if ((this._Sales != value))
				{
					this._Sales = value;
				}
			}
		}
	}
	
	public partial class GetTopViewedPhotosResult
	{
		
		private int _ID;
		
		private long _CustomerViews;
		
		public GetTopViewedPhotosResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerViews", DbType="BigInt NOT NULL")]
		public long CustomerViews
		{
			get
			{
				return this._CustomerViews;
			}
			set
			{
				if ((this._CustomerViews != value))
				{
					this._CustomerViews = value;
				}
			}
		}
	}
	
	public partial class GetPartnerTopViewedPhotosResult
	{
		
		private int _ID;
		
		private long _CustomerViews;
		
		public GetPartnerTopViewedPhotosResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerViews", DbType="BigInt NOT NULL")]
		public long CustomerViews
		{
			get
			{
				return this._CustomerViews;
			}
			set
			{
				if ((this._CustomerViews != value))
				{
					this._CustomerViews = value;
				}
			}
		}
	}
	
	public partial class GetCurrentTopPartnersResult
	{
		
		private int _PartnerID;
		
		private System.Nullable<int> _Sales;
		
		public GetCurrentTopPartnersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					this._PartnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sales", DbType="Int")]
		public System.Nullable<int> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				if ((this._Sales != value))
				{
					this._Sales = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
